div class="row">
          <div class="col s12 center-align patientAndDoctor">
            <ul class="tabs">
              <li class="tab col s6"><a href="#patientForm" class="btn waves-effect waves- flow-text active">Users</a></li>
              <li class="tab col s6"><a  href="#doctorForm" class="waves-effect waves-light flow-text">Doctor</a></li>
            </ul>
          </div>
          <div id="patientForm" class="col s12">
            <div class="reg">
                <form class="col s12">
                  <div id="patientForm" class="active">
                    <h4 class="flow-text">Registration</h4>
                    <div class="row">
                      <div class="input-field col s6">
                        <i class="icon ion-android-contact"></i>
                        <input  type="text" class="validate">
                        <label >Full Name</label>
                      </div>
                      <div class="input-field col s6">
                        <i class="icon ion-android-mail"></i>
                        <input type="email" class="validate">
                        <label for="email">Email</label>
                      </div>
                    </div>
                    
                    <div class="row">
                      <div class="input-field col s6">
                        <i class="icon ion-ios-contact"></i>
                        <input id="telephone" type="tel" class="validate">
                        <label for="telephone">Telephone</label>
                      </div>
                      <div class="input-field col s6">
                        <i class="icon fa-birthday-cake"></i>
                        <input id="age" type="tel" class="validate">
                        <label for="city">Age</label>
                      </div>
                    </div>
                    <div class="row">
                      <div class="input-field col s6">
                        <i class="icon ion-location"></i>
                        <input id="city" type="tel" class="validate">
                        <label for="city">City</label>
                      </div>
                      <div class="input-field col s6">
                        <i class="icon ion-location"></i>
                        <input type="state" class="validate">
                        <label for="state">State</label>
                      </div>
                    </div>
                  <div id="doctorForm" class="col s12">
                    <h4 class="flow-text">Proceed</h4>
                    <div class="row">
                      <div class="input-field col s6">
                        <select style="display: inline; color: red; background-color: blue !important width: 60% !important" class="blue white-text left hide">
                          <option value="" disabled selected>Select gender</option>
                          <option value="1">Option 1</option>
                          <option value="2">Option 2</option>
                          <option value="3">Option 3</option>
                        </select>              
                      </div>
                      <div class="input-field col s6">
                        <i class="icon ion-ios-photos"></i>
                        <input type="state" class="validate">
                        <label for="state">Photo</label>
                     </div>
                    </div>

                </div>

  
                </form>
              </div>
            </div>
          </div>



           <div class="input-field col s6">
                <i class="icon ion-android-mail"></i>
                <input type="email" class="validate">
                <label for="email">Email</label>
              </div>
              <div class="input-field col s6">
                <i class="icon ion-ios-eye"></i>
                <input  type="password" class="validate">
                <label >Password</label>
              </div>

              	// {
	// 	// path: nav.links.interface.url,
	// 	// name: 'BHCS | ' + navs.links.interface.url,
	// 	// component:  index
	// 	// meta: {
	// 	// requiresAuth: true,
	// 	// userAuth: true,
	// 	// adminAuth: true
	// 	// }
	// }

  // meta: {
// requiresAuth: true,
// userAuth: true,
// adminAuth: true
// }

// // define the required dependencies

// const express = require('express')
//   // mongoose = require('mongoose'),
//   // bodyParser = require('body-parser'),
//   // session = require('express-session'),
//   // cors = require('cors'),
//   // morgan = require('morgan'),
//   // flash = require('connect-flash');
// const app = express()

// // //load routes
// // const config = require('../src/helpers/config')
// // const routes = require('./routes/index')

// // //middlewares
// // app.use(morgan('combine'))
// // //body parser middleware
// // app.use(bodyParser.urlencoded({
// //   extended: false
// // }));
// // app.use(bodyParser.json());
// // app.use(cors())
// // //method override-middleware
// // app.use(methodOverride('_method'))

// // const port = process.env.PORT || 4000
// // //setting some functions
// // app.set('port', port)
// // app.set('session_secret', config.authentication.session_secret)
// // app.set('production_database', config.authentication.database_url)
// // app.set('token_secret', config.authentication.token_secret)

// // //Express session middleware
// // app.use(session({
// //     secret: session_secret,
// //     resave: true,
// //     saveUninitialized: true
// // }));

// // app.use('/routes', routes)


// app.listen(port)



useless backend . trash

const express = require('express'),
    mongoose = require('mongoose'),
    router = express(),
    bcrypt = require('bcrypt');
    validator = require('validator')

    require('../models/Patient');
    const authPolicy = require('../helpers/authPolicy')
  const Patient = mongoose.model('patient');
//load patient model
  router.post('/patient', (req, res) => {
    console.log(JSON.stringify(req.body, null, 2))
    let { fullName, email, password, city, gender, age, state, address, telephone, profilePhoto } = req.body
    let patientData = {}
    if (req.body.password < 5) {
      req.body.password = ''
      req.body.confirmPassword = ''
      res.status(403).send('Password must be atleast 4 characters!')
    }
    else  if (req.body.password !== req.body.confirmPassword) {
      req.body.password = ''
      req.body.confirmPassword = ''
      res.status(403).send( 'Passwords do not match!')
    } 
    else {
        if (validator.isEmail(req.body.email)) {
          Patient.findOne({email: req.body.email})
            .then(patient=>{
              if (!patient) {
                if (fullName === '') {
                  res.status(403).send('Full name is required')
                } 
                else if (fullName.length < 6) {
                  res.status(403).send('Length of full name is too small')
                } else if (fullName.length >= 6) {
                  patientData.fullName = fullName
                }
                if (city === '') {
                  res.status(403).send('You must provide your city')
                } else if(city.length < 3){
                  res.status(403).send('Invalid city name')
                } else if (city.length > 3) {
                  patientData.city = city
                }
                if (state === '') {
                  res.status(403).send('Your state is required to serve you better')
                } else if (state.length < 3) {
                  res.status(403).send('Invalid state name')
                } else if (state.length >= 3) {
                  patientData.state = state
                }
                if (address === '') {
                  res.status(403).send('You must supply your address')
                } else if (state.length < 3) {
                  res.status(403).send('Invalid state name')
                } else if (address && address.length > 13){
                  patientData.address = address
                }
                if (gender === 'Male' || gender === 'Female') {
                  patientData.gender = gender
                }
                if (age >= 16){
                  patientData.age = age
                }
                if (email && validator.isEmail(email)) {
                  patientData.email = email
                }
                else {
                  return res.status(422).send('Email is required')
                }
                if(!telephone){
                  res.status(403).send('Your phone number is required')
                } else if (telephone.length >=8){
                  patientData.telephone = telephone
                }
                if (password && password.length >=5) {
                  patientData.password = bcrypt.hashSync(password, 5)
                }

                let newPatient = new Patient(patientData)
                  // fullName: patientData.fullName,
                  // address: patientData.address,
                  // age: patientData.age,
                  // email: patientData.email,
                  // telephone: req.body.telephone,
                  // password: patientData.password,
                  // gender: patientData.gender,
                  // city: patientData.city,
                  // state: patientData.state
                // )
                newPatient.save(err =>{
                  if (!err) {
                    console.log('Patient successfully registered')
                    return res.status(201).json('Registration successful!')
                  }
                  // else {
                  //   console.log(JSON.stringify(err, null, 3))
                  //   return res.status(500).send('Unable to register you, kindly try again.')
                  // }
                })
              }
              else  {
                res.status(409).send('Email already exists!')
                patient = ''
              }
            })
        }
    }
  })



module.exports = router


 let {user, password} = req.body
    Patient.findOne({user: user}, 'password', (err, userData) => {
      if (!err && userData !== null) {
        let isValidPassword = bcrypt.compareSync(password, userData.password)
        console.log(password + '\n' + userData.password)
        // if (isValidPassword) {
        //   const validateUser = {
        //     email: userData.email,
        //     id: userData._id
        //   }

        //   let token = jwt.sign(validateUser, config.token_secret)
        //   res.status(200).send({token, email: userData.email})
        // } else {
        //   res.status(401).send('Invalid password')
        // }

      //   if(isValidPassword) {
      //     console.log('correct user details!')
      //   } else {
      //     console.log('incorrect password!')
      //   }
      // } else {
      //   res.status(401).send('User not found!')
      //   console.log('user not found!')
      }
    })

    
// else {
//   if (err) errors.push(err)
//   console.log(JSON.stringify(errors, null, 2))
//   res.status(403).send('invalid login details.')

 // router.use((req, res, next) => {
  //   if (req.session.user) {
  //     next()
  //   } else {
  //     res.status(401).send('Authorization failed! Please login')
  //   }
  // })

  // router.use((req, res, next) => {
  //   let token = req.headers['x-access-token'] || req.body.token

  //   if (token) {
  //     jwt.verify(token, config.token_secret, function (err, decoded) {
  //       if (!err) {
  //         req.decoded = decoded
  //         next()
  //       } else {
  //         res.status(403).send('Invalid token supplied')
  //       }
  //     })
  //   } else {
  //     res.status(403).send('Authorization failed! \'n Please provide a valid token')
  //   }
  // })


 // Doctor.findOne({email: doctorData.email})
    //   .then(doctor => {
    //     if(!doctor) {
          // let newDoctor = new Doctor(doctorData)
          // newDoctor.save(err => {
          //   if (!err) {
          //     console.log('Registration successful')
          //     return res.status(201).json('Doctor has successfully been registered!')
          //   } else {
          //     if (err.code === 11000) {
          //       console.log('user already exist')
          //       return res.status(409).send('user already exist!')
          //     } else {
          //       console.log(JSON.stringify(err, null, 2))
          //       return res.status(500).send('There were errors registering you.<br/>We\' working towards fixing this!')
          //     }
          //   } 
          // })
    //     } else {
    //       return res.status(409).send('User already exist!')
    //     }
    //   }) 