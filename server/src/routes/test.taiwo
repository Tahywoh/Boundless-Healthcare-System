if(validator.isEmail(user)) {
        Doctor.findOne({email: user}, 'user password userType', (err, doctorData) => {
          if (!err && doctorData!== null) {
            // let {user, password, userType} = doctorData
            let isValidPassword = bcrypt.compareSync(password, doctorData.password)
            if (isValidPassword) {
              const payload = {
                email: doctorData.user,
                Doctor_id: doctorData._id
              }
    
              let token = jwt.sign(payload, config.token_secret)
              res.status(200).send(JSON.stringify({token, user: req.body.user, userType: req.body.userType}))
            } else {
              res.status(401).send('Incorrect password!')
            }
          } else {
            if (err) {
              console.log(JSON.stringify(err, null, 2))
            }
            res.status(401).send('Invalid login parameters!')
          }
        })
      }





      const router = require('express').Router()

const signin = require('./signin'),
  signup = require('./signup')

const jwt = require('jsonwebtoken')

//Users routes

router.use(signin)
router.use(signup)
router.use((req, res, next) => {
  console.log(JSON.stringify(req.body, undefined, 3))
  var token = req.headers['x-access-token'] || req.body.token
  if (token) {
    jwt.verify(token, req.app.get('tokenSecret'), (err, decoded) => {
      if (err) {
        console.log(JSON.stringify(err, undefined, 3))
      }
      req.decoded = decoded
      next()
    })
  } else {
    res.status(403).json({'Result of data sent' : 'No token provided'})
  }
})

router.use('/signin',signin)
router.use('/signup',signup)
module.exports = router